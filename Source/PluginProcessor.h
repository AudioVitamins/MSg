/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
  
  AudioVitaminsAudioProcessor
  
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginAssignProcessor.h"
#include "params.h"
#include "Delay.h"
#include "Authentication/Authentication.h"
#define DEMO_VERSION  0
class AudioVitaminsAudioProcessor  : public AudioProcessor, public ChangeListener
{
public:
    //==============================================================================
    AudioVitaminsAudioProcessor();
    ~AudioVitaminsAudioProcessor();
    
    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    
    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;
    
    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;
    
    //==============================================================================
    const String getName() const override;
    
    //int getNumParameters() override;
    float getParameter (int index) override;
    void setParameter (int index, float newValue) override;
    void setParameterNotifyingHost (int parameterIndex, float newValue);
    
    bool isParameterAutomatable (int parameterIndex);
    
    const String getParameterName (int index) override;
    const String getParameterText (int index) override;
    
    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;
    
    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;
    
    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;
    
    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    
    
    void changeListenerCallback (ChangeBroadcaster*);
    
    
    int effect_slot[2];
    ScopedPointer<ApplicationProperties> gAppProperties;
    ScopedPointer<KnownPluginList> knownPluginList;
    AudioPluginFormatManager fPluginManager;
    
    OwnedArray <PluginDescription> internalTypes;
    KnownPluginList::SortMethod pluginSortMethod;
    File deadMansPedalFile;
    
    enum Param
    {
        bypassIndex=0,
        selectedTabIndex
    };
    
    bool bypass;
    int selectedTab;
    
    AudioPlayHead::CurrentPositionInfo  lastPosInfo;
    bool isLooping;
    int loopStartBar;
    int loopEndBar;
    bool isPlaying;
    int currentBar;
    int currentBeat;
    int lastBar;
    bool isInBarLoop;
    int barCounter;
    void auditionCounter(int bar, int beat, int ticks);
    void auditionCounter3(int bar, int beat, int ticks );
    int lastBarTick; // hold last bar that swichted autions
    int lastAuditionedSlot;
    
    void shiftAuditions();

    
    // Effects Rack
    ScopedPointer<PluginAssignProcessor> pluginAssignProcessor[2];
    bool activeSlot[2];
    bool shouldAudition[2];
    bool audition[2];
    int barLength; // default to 0
    int timerCounter;
    int auditionAcc;
    
    void resetBarCounter()
    {
        barCounter              = barLength;
        lastAuditionedSlot      = 0;
        
        //audition[0] = true;
        for (int i = 0; i < 2; i++)
        {
            audition[i] = false;
        }
    }
    
    void SetBarLength(int bl)
    {
        barLength = bl;
        if (barLength == 0)
        { for (int i = 0; i < 2; i++) {audition[i] = false;}  }
        
        barCounter = barLength;
    }
    
    int getBarLength()
    {
        return barLength;
    }
    
    int numActive;
    void setSlotActive(int slot, bool active)
    {
        //int index = (TOTAL_SLOT_PARAMS * slot) + SLOT_ACTIVE;
       // setParameter(index, (float)active);
        activeSlot[slot] = active;
    }
    
    void runAfterNonSavedChangesChange(){
        //presets.setNonSavedChanges(true);
    }
    
    void rescanPlugins();
    
    
    
    unsigned int slot_latency[2];
    int getSlotLatency(int slot)
    {
        return slot_latency[slot];
    }
    
    //int maxLatency=0;
    // fire single sample through all slots, each time measuring the latency of each slot
    void runLatencyTest();
    
    
    float vuValue[8];
    float getVUMeterValue(int index)
    {
        return vuValue[index];
    }
    
    int dryLatency;
    // Dry buffer delays
    Delay * delay[2];
    
	ScopedPointer<Authentication> authentication;
private:
    
    // param array temp
    float params[END_PARAMS];
    
    // internal parameters
    float inputGainMid;
    float inputGainSide;
    float outputGainMid;
    float outputGainSide;
    float wetdryMid;
    float wetdrySide;
    
    int32 nodeID;

    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (AudioVitaminsAudioProcessor)
};



class SlotAudioParameter : public AudioProcessorParameter {
    
    
public:
    SlotAudioParameter(){};
    ~SlotAudioParameter(){};
    
    float getValue() const override
    {
        return pValue;
    }
    
    void setValue(float newValue) override
    {
        pValue = newValue;
    }
    
    float getDefaultValue() const override
    {
        return 0.0f;
    }
    
    String getName(int maximumStringLength) const override
    {
        switch ( getParameterIndex() )
        {
            default: return String(getParameterIndex()); break;
        }
    }
    
    String getLabel() const override
    {
        return "";
    }
    
    float getValueForText(const String& text) const override
    {
        return pValue;
    }
    
    bool isMetaParameter() const override
    {
        return false;
    }
    
    
private:
    
    float pValue;
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
